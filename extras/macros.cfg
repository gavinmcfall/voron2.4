## Serial Messages
[gcode_macro _serialMessages]
gcode:
    {% set message = params.MSG|string %}
    { action_respond_info(message) }

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    G90 # Absolute position mode
    G92 E0 # Reset Extruder
    {% set bedtemp = params.BED|default(40)|int %}
    {% set hotendtemp = params.HOTEND|default(260)|int %}
    {% set chambertemp = params.CHAMBER|default(20)|int %}
    {% set skirts = params.SKIRTS|default(0)|int %}
    {% set brim = params.BRIM|default(0)|float %}
    {% set material = params.MATERIAL|default(ABS)|string %}
    {% set layerheight = params.LAYER_HEIGHT|default(0.1)|float %}
    {% set accel = params.MAIN_ACCEL|default(20000)|int %}
    {% set initial_hotend = (hotendtemp / 1.4)|round(0)|int %}
    _serialMessages MSG='All Vars from SS have been set'
    M83 # use relative distances for extrusion
    
    _serialMessages MSG='Initial Hotend to {initial_hotend}ºC'
    _serialMessages MSG='Initial Bed to {bedtemp}ºC'
    
    M104 S{initial_hotend}  # Heat Hotend WITHOUT WAIT
    M140 S{bedtemp}         # HEAT BED WITHOUT WAIT

    M106 S0                 # Turns Part Cooling Fan Off

    # Based on Material Type set allowed range for Chamber temp
    
    {% if material == 'PLA' %}
        _serialMessages MSG='Setting chamber min range to {chambertemp-5}'
        _serialMessages MSG='Setting chamber max range to {chambertemp-2}'
        TEMPERATURE_WAIT SENSOR='temperature_sensor chamber_probe_a' MINIMUM={chambertemp-5} #MAXIMUM={chambertemp-2}
    {% elif material == 'ABS' %}
        _serialMessages MSG='Setting chamber min range to {chambertemp-9}'
        _serialMessages MSG='Setting chamber max range to {chambertemp-2}'
        TEMPERATURE_WAIT SENSOR='temperature_sensor chamber_probe_a' MINIMUM={chambertemp-9} MAXIMUM={chambertemp-2}
    {% elif material == 'PETG' %}
        _serialMessages MSG='Setting chamber min range to {chambertemp-5}'
        _serialMessages MSG='Setting chamber max range to {chambertemp-2}'
        TEMPERATURE_WAIT SENSOR='temperature_sensor chamber_probe_a' MINIMUM={chambertemp-5} MAXIMUM={chambertemp-2}
    {% else %}
        _serialMessages MSG='Setting chamber min range to {chambertemp}'
        _serialMessages MSG='Setting chamber max range to {chambertemp+5}'
        TEMPERATURE_WAIT SENSOR='temperature_sensor chamber_probe_a' MINIMUM={chambertemp} MAXIMUM={chambertemp+5}
    {% endif %}

     _serialMessages MSG='Starting to heat bed to {bedtemp}ºC'
    M190 S{bedtemp}         # Start heating bed and WAIT

     _serialMessages MSG='Home, QGL & Bed Mesh'
    G28 X Y Z               # Home all Axis
    QUAD_GANTRY_LEVEL
    G1 Z20
    M400
    G28 Z                   # Home Z again before Mesh
    BED_MESH_CALIBRATE ADAPTIVE=1

    _serialMessages MSG='final heating before starting print!'
    M104 S{initial_hotend}
    M190 S{bedtemp}         # Start heating bed and WAIT
    M109 S{hotendtemp}      # Start heating hotend and WAIT


    {% if material == 'PLA' %}
        SET_GCODE_OFFSET Z_ADJUST=0.195 MOVE=1
        _serialMessages MSG='print_start changed zoffset: 0.195'
    {% endif %}
    {% if material == 'ABS' %}
        SET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=1
        _serialMessages MSG='print_start set zoffset to 0.025'
    {% endif %}
    _serialMessages MSG='LETS GO!!'
   

   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

## Cartographer
## If you are running Klipper Screen, add this Macro to your G-Code
## this stops klipper screen doing a random bedmesh when you press Z Calibrate on it.  
[gcode_macro PROBE_CALIBRATE]
gcode:
    CARTOGRAPHER_CALIBRATE

## Cartographer Backlash Comp
[gcode_macro FULL_BACKLASH_COMP]
gcode:
    G90 # Sets movement to Absolute
    G0 Z10 F1500 # Moves Z to 10mm regardless of it ifs up or down at 25mm/s
    {% set qgl_points = printer.configfile.settings.quad_gantry_level.points %}
    {% set probe_x = printer['configfile'].config["cartographer"]["x_offset"]|float %}
    {% set probe_y = printer['configfile'].config["cartographer"]["y_offset"]|float %}
    # {% set probe_z = printer['configfile'].config["cartographer"]["z_offset"]|float %}
    {% set qgl_first_p_x = qgl_points[0][0] | int %}# set QGL first points
    {% set qgl_first_p_y = qgl_points[0][1] | int %}
    {% set qgl_second_p_x = qgl_points [1][0] | int %}
    {% set qgl_second_p_y = qgl_points [1][1] | int %}
    {% set qgl_third_p_x = qgl_points [2][0] | int %}
    {% set qgl_third_p_y = qgl_points [2][1] | int %}
    {% set qgl_fourth_p_x = qgl_points [3][0] | int %}
    {% set qgl_fourth_p_y = qgl_points [3][1] | int %}
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    # _serialMessages MSG='Quad Points X1= {qgl_first_p_x} Y1= {qgl_first_p_y}'
    # _serialMessages MSG='Quad Points X2= {qgl_second_p_x} Y2= {qgl_second_p_y}'
    # _serialMessages MSG='Quad Points X3= {qgl_third_p_x} Y3= {qgl_third_p_y}'
    # _serialMessages MSG='Quad Points X4= {qgl_fourth_p_x} Y4= {qgl_fourth_p_y}'
    # _serialMessages MSG='Quad Points Center_X= {x_center} Center_Y= {y_center}'
    _serialMessages MSG='5 Point Backlash Comp - Begin'
    G90
    _serialMessages MSG='Starting - Front Left'
    G0 X{qgl_first_p_x - probe_x} Y{qgl_first_p_y - probe_y} F6000
    CARTOGRAPHER_ESTIMATE_BACKLASH
    _serialMessages MSG='Starting - Rear Left'
    G0 X{qgl_second_p_x - probe_x} Y{qgl_second_p_y - probe_y} F6000
    CARTOGRAPHER_ESTIMATE_BACKLASH
    _serialMessages MSG='Starting - Rear Right'
    G0 X{qgl_third_p_x - probe_x} Y{qgl_third_p_y - probe_y} F6000
    CARTOGRAPHER_ESTIMATE_BACKLASH
    _serialMessages MSG='Starting - Front Right'
    G0 X{qgl_fourth_p_x - probe_x} Y{qgl_fourth_p_y - probe_y} F6000
    CARTOGRAPHER_ESTIMATE_BACKLASH
    _serialMessages MSG='Starting - Center'
    G0 X{x_center - probe_x} Y{y_center - probe_y} F6000
    CARTOGRAPHER_ESTIMATE_BACKLASH
    _serialMessages MSG='5 Point Backlash Comp Complete'


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    SET_VELOCITY_LIMIT ACCEL=10000 MINIMUM_CRUISE_RATIO=0
    _BED_MESH_CALIBRATE
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio}

[gcode_macro _check_if_homed]
gcode:

    _check_z_clearance
    # if x and y are not homed
    {% if not 'x' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='homing X'
        G28 X
    {% endif %}
        {% if not 'y' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='homing Y'
        G28 Y
    {% endif %}
    {% if not 'z' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='homing Z'
        G28 Z
    {% endif %}

[gcode_macro _check_z_clearance]
gcode:

    {% set safe_z_h = printer["configfile"].config["quad_gantry_level"]["horizontal_move_z"] |float %}
    {% set z_speed = printer["configfile"].config["quad_gantry_level"]["speed"] * 30 %} 
    {% set speed = printer["configfile"].config["quad_gantry_level"]["speed"] * 60 %}
    
    {% if not 'z' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='setting Z to 0 so Z can be moved'
        SET_KINEMATIC_POSITION z=0
    {% endif %}
    #add checks here to raise/lower z by x if probe is attached
    #{% if printer.toolhead.position.z < safe_z_h %}
    #    _serialMessages MSG='too low moving up'
    #{% endif %}
    {% if printer.toolhead.position.z < safe_z_h %}
        # {% if printer.probe.last_query %}
            #_serialMessages MSG='raising Z half'
            # G0 Z{safe_z_h / 2 } F{z_speed}
        # {% else %}
            #_serialMessages MSG='raising Z full'
            G0 Z{safe_z_h} F{z_speed}
        # {% endif %}
    {% endif %}

[gcode_macro center]
gcode:
    #{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    #{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    {% set safe_z_h = printer["configfile"].config["quad_gantry_level"]["horizontal_move_z"] |float %}
    {% set speed = (printer["configfile"].config["quad_gantry_level"]["speed"] |float) *60 /2 %} 
    _check_if_homed
    _check_z_clearance
    G90 ; absolute position mode
    #G0 x150 Y150 Z2 f9000
    G0 x{x_center} Y{y_center} Z{safe_z_h} F{speed}
